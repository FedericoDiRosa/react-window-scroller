{"version":3,"sources":["../../src/index.jsx","Row.jsx","FixedSizeList.jsx","VariableSizeList.jsx","Cell.jsx","FixedSizeGrid.jsx","VariableSizeGrid.jsx","App.jsx","index.jsx"],"names":["children","throttleTime","isGrid","ref","useRef","outerRef","useEffect","handleWindowScroll","throttle","offsetTop","offsetLeft","scrollTop","document","scrollLeft","window","onScroll","useCallback","scrollOffset","scrollUpdateWasRequested","top","left","Math","style","width","height","display","Row","index","className","FixedSizeList","innerHeight","itemCount","itemSize","rowSizes","Array","map","round","random","getItemSize","VariableSizeList","Cell","columnIndex","rowIndex","FixedSizeGrid","innerWidth","columnCount","columnWidth","rowCount","rowHeight","columnWidths","rowHeights","VariableSizeGrid","lists","App","useState","selected","setSelected","list","key","onClick","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5a83584f.chunk.js","sourcesContent":["import { useRef, useEffect, useCallback } from 'react'\nimport throttle from 'lodash.throttle'\n\nexport const ReactWindowScroller = ({\n  children,\n  throttleTime = 10,\n  isGrid = false\n}) => {\n  const ref = useRef()\n  const outerRef = useRef()\n\n  useEffect(() => {\n    const handleWindowScroll = throttle(() => {\n      const { offsetTop = 0, offsetLeft = 0 } = outerRef.current || {}\n      const scrollTop = document.documentElement.scrollTop - offsetTop\n      const scrollLeft = document.documentElement.scrollLeft - offsetLeft\n      if (isGrid) ref.current && ref.current.scrollTo({ scrollLeft, scrollTop })\n      if (!isGrid) ref.current && ref.current.scrollTo(scrollTop)\n    }, throttleTime)\n\n    window.addEventListener('scroll', handleWindowScroll)\n    return () => window.removeEventListener('scroll', handleWindowScroll)\n  }, [isGrid])\n\n  const onScroll = useCallback(\n    ({ scrollLeft, scrollTop, scrollOffset, scrollUpdateWasRequested }) => {\n      if (!scrollUpdateWasRequested) return\n      const { scrollTop: top, scrollLeft: left } = document.documentElement\n      const { offsetTop = 0, offsetLeft = 0 } = outerRef.current || {}\n\n      scrollOffset += Math.min(top, offsetTop)\n      scrollTop += Math.min(top, offsetTop)\n      scrollLeft += Math.min(left, offsetLeft)\n\n      if (!isGrid && scrollOffset !== top) window.scrollTo(0, scrollOffset)\n      if (isGrid && (scrollTop !== top || scrollLeft !== left)) {\n        window.scrollTo(scrollLeft, scrollTop)\n      }\n    },\n    [isGrid]\n  )\n\n  return children({\n    ref,\n    outerRef,\n    style: {\n      width: isGrid ? 'auto' : '100%',\n      height: '100%',\n      display: 'inline-block'\n    },\n    onScroll\n  })\n}\n","import React from 'react'\n\nexport const Row = ({ index, style }) => (\n  <div className={index % 2 ? 'odd' : 'even'} style={style}>\n    Row {index}\n  </div>\n)\n","import React from 'react'\nimport { FixedSizeList as List } from 'react-window'\nimport { ReactWindowScroller } from 'react-window-scroller'\nimport { Row } from './Row'\n\nconst FixedSizeList = () => (\n  <ReactWindowScroller>\n    {({ ref, outerRef, style, onScroll }) => (\n      <List\n        ref={ref}\n        outerRef={outerRef}\n        style={style}\n        height={window.innerHeight}\n        itemCount={1000}\n        itemSize={100}\n        onScroll={onScroll}\n      >\n        {Row}\n      </List>\n    )}\n  </ReactWindowScroller>\n)\n\nexport default FixedSizeList\n","import React from 'react'\nimport { VariableSizeList as List } from 'react-window'\nimport { ReactWindowScroller } from 'react-window-scroller'\nimport { Row } from './Row'\n\nconst rowSizes = [...new Array(1000)].map(\n  () => 25 + Math.round(Math.random() * 50)\n)\nconst getItemSize = (index) => rowSizes[index]\n\nconst VariableSizeList = () => (\n  <ReactWindowScroller>\n    {({ ref, outerRef, style, onScroll }) => (\n      <List\n        ref={ref}\n        outerRef={outerRef}\n        style={style}\n        height={window.innerHeight}\n        itemCount={1000}\n        itemSize={getItemSize}\n        onScroll={onScroll}\n      >\n        {Row}\n      </List>\n    )}\n  </ReactWindowScroller>\n)\n\nexport default VariableSizeList\n","import React from 'react'\n\nexport const Cell = ({ columnIndex, rowIndex, style }) => (\n  <div\n    className={\n      columnIndex % 2\n        ? rowIndex % 2 === 0\n          ? 'odd'\n          : 'even'\n        : rowIndex % 2\n        ? 'odd'\n        : 'even'\n    }\n    style={style}\n  >\n    r{rowIndex}, c{columnIndex}\n  </div>\n)\n","import React from 'react'\nimport { FixedSizeGrid as Grid } from 'react-window'\nimport { ReactWindowScroller } from 'react-window-scroller'\nimport { Cell } from './Cell'\n\nconst FixedSizeGrid = () => (\n  <ReactWindowScroller isGrid>\n    {({ ref, outerRef, style, onScroll }) => (\n      <Grid\n        ref={ref}\n        outerRef={outerRef}\n        style={style}\n        height={window.innerHeight}\n        width={window.innerWidth}\n        columnCount={1000}\n        columnWidth={100}\n        rowCount={1000}\n        rowHeight={50}\n        onScroll={onScroll}\n      >\n        {Cell}\n      </Grid>\n    )}\n  </ReactWindowScroller>\n)\n\nexport default FixedSizeGrid\n","import React from 'react'\nimport { VariableSizeGrid as Grid } from 'react-window'\nimport { ReactWindowScroller } from 'react-window-scroller'\nimport { Cell } from './Cell'\n\nconst columnWidths = [...new Array(1000)].map(\n  () => 75 + Math.round(Math.random() * 50)\n)\nconst rowHeights = [...new Array(1000)].map(\n  () => 25 + Math.round(Math.random() * 50)\n)\n\nconst VariableSizeGrid = () => (\n  <ReactWindowScroller isGrid>\n    {({ ref, outerRef, style, onScroll }) => (\n      <Grid\n        ref={ref}\n        outerRef={outerRef}\n        style={style}\n        height={window.innerHeight}\n        width={window.innerWidth}\n        columnCount={1000}\n        columnWidth={(index) => columnWidths[index]}\n        rowCount={1000}\n        rowHeight={(index) => rowHeights[index]}\n        onScroll={onScroll}\n      >\n        {Cell}\n      </Grid>\n    )}\n  </ReactWindowScroller>\n)\n\nexport default VariableSizeGrid\n","import React, { useState } from 'react'\nimport FixedSizeList from './FixedSizeList'\nimport VariableSizeList from './VariableSizeList'\nimport FixedSizeGrid from './FixedSizeGrid'\nimport VariableSizeGrid from './VariableSizeGrid'\n\nconst lists = ['Fixed List', 'Variable List', 'Fixed Grid', 'Variable Grid']\n\nconst App = () => {\n  const [selected, setSelected] = useState(lists[0])\n  return (\n    <>\n      <nav>\n        {lists.map((list) => (\n          <button key={list} onClick={() => setSelected(list)}>\n            {list}\n          </button>\n        ))}\n      </nav>\n\n      {selected === 'Fixed List' && <FixedSizeList />}\n      {selected === 'Variable List' && <VariableSizeList />}\n      {selected === 'Fixed Grid' && <FixedSizeGrid />}\n      {selected === 'Variable Grid' && <VariableSizeGrid />}\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}